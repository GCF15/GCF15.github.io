<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乘·风</title>
  
  <subtitle>乘风破浪会有时 直挂云帆济沧海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-13T02:59:39.332Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Vico</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随笔</title>
    <link href="http://example.com/2022/07/12/Essay20220712/"/>
    <id>http://example.com/2022/07/12/Essay20220712/</id>
    <published>2022-07-12T11:49:48.000Z</published>
    <updated>2022-07-13T02:59:39.332Z</updated>
    
    <content type="html"><![CDATA[<p>今天中午午睡半个小时，一口气做了四个梦。。。<br>画面感很强，很真实，也很离奇，确实也符合梦境，毫无逻辑。</p><p>第一个梦醒过来就忘了。</p><p>第二个梦是在地铁上碰到老同学，被拉去体验穿着太空服的过山车。。。这个过程印象很深，跟真的一样。</p><p>第三个梦是跟初中同学聚会的场景，阶梯上随意的合照。。。</p><p>第四个梦是跟家人一起，在一个较为破旧的，拥挤的，有点脏乱的“家”里面。跟一对不认识的老夫妇合桌吃饭，较为和蔼。画面挺温馨的。最后一个镜头，奶奶跟那个老夫人长的挺像，刚想跟旁边的家人说就醒了。</p><p>很久没做过画面感这么强的梦了，记录一下梦境。梦里的世界挺神奇的。</p><p>可能最近睡得太晚导致。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天中午午睡半个小时，一口气做了四个梦。。。&lt;br&gt;画面感很强，很真实，也很离奇，确实也符合梦境，毫无逻辑。&lt;/p&gt;
&lt;p&gt;第一个梦醒过来就忘了。&lt;/p&gt;
&lt;p&gt;第二个梦是在地铁上碰到老同学，被拉去体验穿着太空服的过山车。。。这个过程印象很深，跟真的一样。&lt;/p&gt;
&lt;p&gt;第
      
    
    </summary>
    
      <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Emotion" scheme="http://example.com/tags/Emotion/"/>
    
  </entry>
  
  <entry>
    <title>视图和表的区别</title>
    <link href="http://example.com/2022/07/05/study-db-view/"/>
    <id>http://example.com/2022/07/05/study-db-view/</id>
    <published>2022-07-05T12:04:35.000Z</published>
    <updated>2022-07-06T03:09:54.719Z</updated>
    
    <content type="html"><![CDATA[<p>数据库中的数据都是存储在表中的，而视图只是一个或多个表依照某个条件组合而成的结果集。</p><p>一般来说你可以用update，insert，delete等sql语句修改表中的数据，而对视图只能进行select操作。但是也存在可更新的视图，对于这类视图的update，insert和delete等操作最终会作用于与其相关的表中数据。因此，表是数据库中数据存储的基础，而视图只是为了满足某种查询要求而建立的一个对象。</p><p>表是物理存在的，你可以理解成计算机中的文件！<br>视图是虚拟的内存表，你可以理解成Windows的快捷方式！<br>1.视图是数据库数据的特定子集。可以禁止所有用户访问数据库表，而要求用户只能通过视图操作数据，这种方法可以保护用户和应用程序不受某些数据库修改的影响。</p><p>2.视图是抽象的，他在使用时，从表里提取出数据，形成虚的表。  不过对他的操作有很多的限制  。</p><p>3.而且视图是永远不会自己消失的除非你删除它。<br>视图有时会对提高效率有帮助。临时表几乎是不会对性能有帮助，是资源消耗者。<br>  视图一般随该数据库存放在一起，临时表永远都是在tempdb里的。  </p><p>4.视图适合于多表连接浏览时使用!不适合增、删、改.，存储过程适合于使用较频繁的SQL语句，这样可以提高  执行效率!  </p><h4 id="视图和表的区别和联系"><a href="#视图和表的区别和联系" class="headerlink" title="视图和表的区别和联系"></a>视图和表的区别和联系</h4><p>区别：</p><p>​      1、视图是已经编译好的sql语句。而表不是<br>​      2、视图没有实际的物理记录。而表有。<br>​      3、表是内容，视图是窗口<br>​      4、表只用物理空间而视图不占用物理空间，视图只是逻辑概念的存在，表可以及时对它进行修改，但视图只能有创建的语句来修改<br>​      5、表是内模式，视图是外模式<br>​      6、视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些SQL语句的集合。从安全的角度说，视图可以不给用户接触数据表，从而不知道表结构。<br>​      7、表属于全局模式中的表，是实表；视图属于局部模式的表，是虚表。<br>​      8、视图的建立和删除只影响视图本身，不影响对应的基本表。</p><p>联系：视图（view）是在基本表之上建立的表，它的结构（即所定义的列）和内容（即所有数据行）都来自基本表，它依据基本表存在而存在。一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象和在逻辑意义上建立的新关系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据库中的数据都是存储在表中的，而视图只是一个或多个表依照某个条件组合而成的结果集。&lt;/p&gt;
&lt;p&gt;一般来说你可以用update，insert，delete等sql语句修改表中的数据，而对视图只能进行select操作。但是也存在可更新的视图，对于这类视图的update，in
      
    
    </summary>
    
      <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客指引</title>
    <link href="http://example.com/2022/07/03/HexoGuide/"/>
    <id>http://example.com/2022/07/03/HexoGuide/</id>
    <published>2022-07-03T11:52:59.000Z</published>
    <updated>2022-07-04T09:41:38.061Z</updated>
    
    <content type="html"><![CDATA[<p>搭建个人博客记录点滴，走出阴暗！</p><p>2019年的时候在舍友润饼的介绍下知道Hexo这个东西，当时觉得挺新奇的，捣鼓了一阵，确实捣鼓出来了。但是过程嘛，很心累，原因确实是当时学习能力有限，网上东找找西找找资料，找不到头绪。</p><p>还有当时精神状态也很差。以后再回过头去聊当时的情况。</p><p>图片测试</p><p><img src="/.com//Capture.PNG"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搭建个人博客记录点滴，走出阴暗！&lt;/p&gt;
&lt;p&gt;2019年的时候在舍友润饼的介绍下知道Hexo这个东西，当时觉得挺新奇的，捣鼓了一阵，确实捣鼓出来了。但是过程嘛，很心累，原因确实是当时学习能力有限，网上东找找西找找资料，找不到头绪。&lt;/p&gt;
&lt;p&gt;还有当时精神状态也很差。以
      
    
    </summary>
    
      <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
      <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="http://example.com/2022/06/30/20220629/"/>
    <id>http://example.com/2022/06/30/20220629/</id>
    <published>2022-06-30T11:40:33.000Z</published>
    <updated>2022-07-05T09:35:40.829Z</updated>
    
    <content type="html"><![CDATA[<p>理想中的高乘風是什麽樣子的？<br>在一起四個月是不是有些失望，與腦海中的形象不一致？沒有達到預期？</p><p>并不是想象中那麽優秀，相反，早已千瘡百孔，迷茫，逃避。知道爲什麽‘喜歡’熬夜嗎？<br>因爲夜晚的漆黑寧靜讓我可以逃避一切。</p><p>冲那時起，對一切事物失去興趣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;理想中的高乘風是什麽樣子的？&lt;br&gt;在一起四個月是不是有些失望，與腦海中的形象不一致？沒有達到預期？&lt;/p&gt;
&lt;p&gt;并不是想象中那麽優秀，相反，早已千瘡百孔，迷茫，逃避。知道爲什麽‘喜歡’熬夜嗎？&lt;br&gt;因爲夜晚的漆黑寧靜讓我可以逃避一切。&lt;/p&gt;
&lt;p&gt;冲那時起，對一切事
      
    
    </summary>
    
      <category term="Emotion" scheme="http://example.com/categories/Emotion/"/>
    
    
      <category term="周记" scheme="http://example.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://example.com/2022/06/28/June-Essay/"/>
    <id>http://example.com/2022/06/28/June-Essay/</id>
    <published>2022-06-28T17:42:12.000Z</published>
    <updated>2022-07-05T09:36:41.832Z</updated>
    
    <content type="html"><![CDATA[<p>风决定要走，云怎么挽留…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;风决定要走，云怎么挽留…&lt;/p&gt;

      
    
    </summary>
    
      <category term="Emotion" scheme="http://example.com/categories/Emotion/"/>
    
    
      <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Vue定时器</title>
    <link href="http://example.com/2022/06/28/timer/"/>
    <id>http://example.com/2022/06/28/timer/</id>
    <published>2022-06-28T17:01:22.000Z</published>
    <updated>2022-07-05T09:36:23.433Z</updated>
    
    <content type="html"><![CDATA[<p>前端定时器 setInterval 和 setTimeout setInterval</p><p>项目：Appeon服务监控</p><p>职责：实现前端页面的展示</p><p>功能需求：实时获取服务状态展示，需要设置定时器</p><h4 id="循环执行"><a href="#循环执行" class="headerlink" title="循环执行"></a>循环执行</h4><p>循环执行就是设置一个时间间隔，每过一段时间都会执行一次这个方法,直到这个定时器被销毁掉。  用法是setInterval（“方法名或方法”，“延时”）， 第一个参数为方法名或者方法，注意为方法名的时候不要加括号，第二个参数为时间间隔（毫秒）。  设置循环执行 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">updataDevice</span>, <span class="number">5000</span>) </span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 第一个参数：this.updataDevice 是ts中的方法，只写方法名不写括号。<br>&#x2F;&#x2F; 第二个参数：5000 表示延时，毫秒，5000毫秒&#x3D;5秒，即执行完本次后，隔5秒再次执行 1 2 3 </p><h4 id="销毁定时器"><a href="#销毁定时器" class="headerlink" title="销毁定时器"></a>销毁定时器</h4><p>案例是vue写的，用vue举例：     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;  // 组件销毁前执行       </span><br><span class="line">    clearInterval(this.timer)  // 清除定时器       </span><br><span class="line">    this.timer = null  // 定时器的变量赋值null     </span><br><span class="line">&#125;, </span><br></pre></td></tr></table></figure><h4 id="vue2的生命周期函数"><a href="#vue2的生命周期函数" class="headerlink" title="vue2的生命周期函数"></a>vue2的生命周期函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate: function () &#123;</span><br><span class="line">           console.group(&#x27;beforeCreate 创建前状态===============》&#x27;);</span><br><span class="line">       &#125;,</span><br><span class="line">       created: function () &#123;</span><br><span class="line">           console.group(&#x27;created 创建完毕状态===============》&#x27;);</span><br><span class="line">       &#125;,</span><br><span class="line">       beforeMount: function () &#123;</span><br><span class="line">           console.group(&#x27;beforeMount 挂载前状态===============》&#x27;);//已被初始化</span><br><span class="line">       &#125;,</span><br><span class="line">       mounted: function () &#123;</span><br><span class="line">           console.group(&#x27;mounted 挂载结束状态===============》&#x27;);</span><br><span class="line">       &#125;,</span><br><span class="line">       beforeUpdate: function () &#123;</span><br><span class="line">           alert(&quot;更新前状态&quot;);</span><br><span class="line">           console.group(&#x27;beforeUpdate 更新前状态===============》&#x27;); //这里指的是页面渲染新数据之前</span><br><span class="line">           alert(&quot;更新前状态2&quot;);</span><br><span class="line">       &#125;,</span><br><span class="line">       updated: function () &#123;</span><br><span class="line">           console.group(&#x27;updated 更新完成状态===============》&#x27;);</span><br><span class="line">       &#125;,</span><br><span class="line">       beforeDestroy: function () &#123;</span><br><span class="line">           console.group(&#x27;beforeDestroy 销毁前状态===============》&#x27;);</span><br><span class="line">       &#125;,</span><br><span class="line">       destroyed: function () &#123;</span><br><span class="line">           console.group(&#x27;destroyed 销毁完成状态===============》&#x27;);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="setTimeout-定时执行"><a href="#setTimeout-定时执行" class="headerlink" title="setTimeout 定时执行"></a>setTimeout 定时执行</h4><p>定时执行setTimeout是设置一个时间，等待时间到达的时候只执行一次，但是执行完以后定时器还在，只是没有运行。  用法是 setTimeout(“方法名或方法”, “延时”); 第一个参数为方法名或者方法，注意为方法名的时候不要加括号，第二个参数为时间间隔。  </p><p>设置定时执行  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;          </span><br><span class="line">this.showMarker()  // 执行的方法        </span><br><span class="line">&#125;, 1000)  // 时间 1000毫秒 = 1秒</span><br></pre></td></tr></table></figure><p> 原文链接：<a href="https://blog.csdn.net/weixin_42776111/article/details/102667081">https://blog.csdn.net/weixin_42776111/article/details/102667081</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端定时器 setInterval 和 setTimeout setInterval&lt;/p&gt;
&lt;p&gt;项目：Appeon服务监控&lt;/p&gt;
&lt;p&gt;职责：实现前端页面的展示&lt;/p&gt;
&lt;p&gt;功能需求：实时获取服务状态展示，需要设置定时器&lt;/p&gt;
&lt;h4 id=&quot;循环执行&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
      <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
